#!/bin/bash
# Prepare the undercloud for deploy

set -eux

# Ironic defaults to using `qemu:///system`.  When running libvirtd
# unprivileged we need to use `qemu:///session`.  This allows us to pass
# the value of libvirt_uri into /etc/ironic/ironic.conf.
# to-do use crudini
{% if libvirt_uri == "qemu:///session" %}
if [ ! -f "/etc/ironic/ironic.conf.oooq" ]; then
    sudo cp /etc/ironic/ironic.conf /etc/ironic/ironic.conf.oooq;
    # newton
    sudo sed -i 's/#libvirt_uri = qemu:\/\/\/system/libvirt_uri = qemu:\/\/\/session/g' /etc/ironic/ironic.conf;
    # liberty, mitaka
    sudo sed -i 's/#libvirt_uri=qemu:\/\/\/system/libvirt_uri=qemu:\/\/\/session/g' /etc/ironic/ironic.conf;
    sudo systemctl restart openstack-ironic-conductor.service;
fi
{% endif %}

# Source in undercloud credentials.
source {{ working_dir }}/stackrc

openstack overcloud image upload \
    {% if bash_deploy_ramdisk %}--old-deploy-image{% endif %}

openstack baremetal import --json instackenv.json
openstack baremetal configure boot

{% if release == 'master' or release == 'mitaka' %}
####################################################
# This is a workaround which should be removed while
# https://bugzilla.redhat.com/show_bug.cgi?id=1324422
# gets its resolution
sudo yum -y install xz-devel
git clone git://git.ipxe.org/ipxe.git
cd ipxe/src
make
sudo cp bin/undionly.kpxe /tftpboot/undionly.kpxe
cd
####################################################
{% endif %}

{% if step_introspect %}
openstack baremetal introspection bulk start
{% endif %}

{% if step_introspect_with_retry %}
./introspection-retry.sh
{% endif %}

{% for name, flavor in (flavors|default({})).items() if name != 'undercloud' %}
#
# Create flavor oooq_{{name}}
#

# remove flavor before attempting to create
nova flavor-delete oooq_{{ name }} > /dev/null 2>&1 || true

# We subtract 1 from the total disk size here to resolve problems
# encountered in CI in which the available disk space on the virtual
# nodes was slightly less than what we requested.
openstack flavor create --id auto \
    --ram {{flavor.memory}} \
    --disk $(( {{flavor.disk}} - 1)) \
    --vcpus {{flavor.vcpu}} \
    oooq_{{ name }}
openstack flavor set \
    --property "cpu_arch"="x86_64" \
    --property "capabilities:boot_option"="local" \
    --property "capabilities:profile"="{{ name }}" oooq_{{ name }}
{% for propname,propval in (flavor.properties|default({})).items() %}
openstack flavor set --property "{{propname}}={{propval}}" oooq_{{ name }}
{% endfor %}

{% endfor %}

{% if undercloud_type == 'baremetal' %}

# Configuring external bridge access"
ExternalNetCidr=$(grep ExternalNetCidr network-environment.yaml|awk '{print $2}')
ExternalInterfaceDefaultRoute=$(grep ExternalInterfaceDefaultRoute network-environment.yaml|awk '{print $2}')
ExternalNetworkVlanID=$(grep ExternalNetworkVlanID network-environment.yaml|awk '{print $2}')

# Creating device for accessing external API network from undercloud
sudo ovs-vsctl add-port br-ctlplane vlan$ExternalNetworkVlanID tag=$ExternalNetworkVlanID -- set interface vlan$ExternalNetworkVlanID type=internal
sudo ip link set dev vlan$ExternalNetworkVlanID up
sudo ip addr add $ExternalInterfaceDefaultRoute/24 dev vlan$ExternalNetworkVlanID
sudo iptables -A BOOTSTACK_MASQ -s $ExternalNetCidr ! -d $ExternalNetCidr -j MASQUERADE -t nat

# Updating flavor baremetal
openstack flavor set --property "cpu_arch"="x86_64" --property "capabilities:boot_option"="local" --property "capabilities:profile"="baremetal" baremetal

# Associating flavor baremetal to all the nodes
{% if release == 'master' %}
ids="$(openstack baremetal list --fields uuid driver | grep pxe_ipmi | awk '{ print $2 }')"
{% else %}
ids="$(ironic node-list --detail | grep pxe_ipmi | awk '{print $(NF-3)}')"
{% endif %}
for i in $ids; do
  ironic node-update $i add properties/capabilities='profile:baremetal,boot_option:local'
done

{% else %}

{% if network_isolation == true and undercloud_type != 'ovb' and ipv6 == false %}
sudo bash -c 'cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-vlan{{ network_isolation_vlan_tag }}
DEVICE=vlan{{ network_isolation_vlan_tag }}
ONBOOT=yes
DEVICETYPE=ovs
TYPE=OVSIntPort
BOOTPROTO=static
IPADDR={{ network_isolation_addr }}
NETMASK={{ network_isolation_netmask }}
OVS_BRIDGE=br-ctlplane
OVS_OPTIONS="tag={{ network_isolation_vlan_tag }}"
EOF'

sudo ifup ifcfg-vlan{{ network_isolation_vlan_tag }}
{%endif%}

{% if network_isolation == true and undercloud_type != 'ovb' and ipv6 == true %}
sudo bash -c 'cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-vlan{{ network_isolation_vlan_tag }}
IPV6INIT=yes
DEVICE=vlan{{ network_isolation_vlan_tag }}
ONBOOT=yes
DEVICETYPE=ovs
TYPE=OVSIntPort
BOOTPROTO=static
IPV6ADDR={{ network_isolation_ipv6_addr }}
OVS_BRIDGE=br-ctlplane
OVS_OPTIONS="tag={{ network_isolation_vlan_tag }}"
EOF'

sudo ifup ifcfg-vlan{{ network_isolation_vlan_tag }}
{%endif%}
{%endif%}
